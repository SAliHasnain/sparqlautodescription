package sad.data.modeling.and.creator;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;

import sad.utils.SADUtils;
import sad.utils.UtilsObjPassing;
import sad.vocab.Prov;
import sad.vocab.SPIN;
import sad.vocab.Sad;
import sad.vocab.Void;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;

/**
 * 
 * @author qaiser.mehmood@insight-centre.org
 */

public class MetadataPlusResultsCreator {

	Resource rsc = null;
	UtilsObjPassing objPass;

	/*
	 * Class Constructor
	 */
	public MetadataPlusResultsCreator(UtilsObjPassing objPass) {

		this.objPass = objPass;

		createGraphs();

	}
	/*
	 * this method models the data objects into semantic representational state  
	 */
	private void createGraphs() {

		Model metaDataMdl = ModelFactory.createDefaultModel();

		Model resultsMdl = objPass.getMdl();

		String sparql_lang = SADUtils.queryLanguage(objPass
				.getQueryToEvaluate());

		if (!resultsMdl.isEmpty()) {
			
			createNamedGraph("Result", resultsMdl);
		} 
		metaDataMdl.createResource(
		createGivenRsr(objPass.getEndpoint(), objPass.getQryName(),
							"QueryRun"), Prov.Activity);
			metaDataMdl.createResource(
					createGivenRsr(objPass.getEndpoint(), objPass.getQryName(),
							"QueryRun"), Sad.QueryRun)
					.addProperty(
							Sad.query,
							metaDataMdl.createResource(
									createGivenRsr(objPass.getEndpoint(),
											objPass.getQryName(), "Query"))
									.addProperty(Sad.language, sparql_lang)
									.addProperty(SPIN.text,
											objPass.getQueryToEvaluate().trim()))
					.addProperty(
							Prov.startedAtTime,
							metaDataMdl.createTypedLiteral(
									objPass.getExecutionStartTime(),
									"http://www.w3.org/2001/XMLSchema#dateTimeStamp"))
					.addProperty(
							Sad.resultDataset,
							metaDataMdl.createResource(
									objPass.getDatasetInQryConstruct())
									.addProperty(Void.sparqlEndpoint,
											metaDataMdl.createResource(objPass.getEndpoint()))
									.addProperty(
											Prov.wasDerivedFrom,
											metaDataMdl.createResource(createGivenRsr(
													objPass.getEndpoint(),
													objPass.getQryName(),
													"Result")).addProperty(Void.triples,
															metaDataMdl.createTypedLiteral(
													objPass.getSols(),
													"http://www.w3.org/2001/XMLSchema#integer"))))

					.addProperty(
							Prov.generated,
							metaDataMdl.createResource(
									createGivenRsr(objPass.getEndpoint(),
											objPass.getQryName(), "Result"))
									.addProperty(
											Prov.wasGeneratedBy,
											metaDataMdl.createResource(createGivenRsr(
													objPass.getEndpoint(),
													objPass.getQryName(),
													"QueryRun"))))
					.addProperty(
							Prov.endedAtTime,
							metaDataMdl.createTypedLiteral(
									objPass.getExecutionEndTime(),
									"http://www.w3.org/2001/XMLSchema#dateTimeStamp"))
					.addProperty(
							Sad.responseCode,
							metaDataMdl.createTypedLiteral(
									objPass.getServerStatusCode(),
									"http://www.w3.org/2001/XMLSchema#integer"))
					.addProperty(
							Sad.responseHeader,
							metaDataMdl.createTypedLiteral(objPass.getHttpResponse()))
					.addProperty(
							Sad.RDFS,
							metaDataMdl.createLiteral(
									"Extracting '" + objPass.getQryName()
											+ "' from '"
											+ objPass.getEndpoint() + "' on "
											+ objPass.getExecutionStartTime(),
									"en"))
					.addProperty(Sad.endpoint,
							metaDataMdl.createResource(objPass.getEndpoint()));
			
			createNamedGraph("Metadata", metaDataMdl);
		
	}
	
	/**
	 * creates directory (Metadata_Plus_Results)
	 *  where the files (Metadata OR Results) are generated based on the contents these contain
	 * @param whichGraph (i.e., Metedata OR Results)
	 * @param model (actual data to be written in the corresponding file)
	 */
	private void createNamedGraph(String whichGraph, Model model){
		
		FileWriter writer = null;
		
		try {
			writer = SADUtils.createDirAndFile(
					"Metadata_Plus_Results",
					URLEncoder.encode(objPass.getEndpoint(), "UTF-8") + "#"
							+ URLEncoder.encode(objPass.getQryName().trim().concat(whichGraph).trim(), "UTF-8"));
			writeToFile(writer, model);
			
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
	}

	
	private void writeToFile(FileWriter writer, Model model){
		
		BufferedWriter bw = null;
		try {
			bw = new BufferedWriter(writer);

			bw.write("\n#---------------------Above Results are generated by following Query-------------------\n");
			bw.write("#" + SADUtils.format(objPass.getQueryToEvaluate()));
			bw.write("\n######################################################################################\n");
			bw.write("\n");
			model.write(writer, "N-TRIPLES");

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				bw.flush();
				bw.close();
			} catch (IOException e) {
				e.printStackTrace();
			}

		}
	
	}
	
	
	/*
	 * appends the (#) within the given parameters
	 */
	private String createGivenRsr(String a, String b, String c) {
		return a.concat("#").concat(b).concat(c).trim();
	}
	
}
